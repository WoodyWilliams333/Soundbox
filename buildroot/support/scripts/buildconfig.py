# author:		Kevin Chen.
# function:		auto generate build config file, support java file, .h file will be supported later

from abc import ABCMeta, abstractmethod
import sys
import time

CONST_HEAD_CONFIG_FILE = "-h"
CONST_JAVA_CONFIG_FILE = "-java"
CONST_MAKEFILE_CONFIG_FILE = "-mk"

class BaseConfigFile:
	'base ConfigFile'
	strContent = ""
	
	def __init__(self, inputFile, outputFile):
		self.inputFile = inputFile
		self.outputFile = outputFile
	
	def generateComment(self):
		parameters = "/*\n"
		parameters += "* This file was auto generated by buildconfig.py\n"
		parameters += "* Don't modify!\n"
		parameters += "* Generated time: " + time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
		parameters += "\n*/\n"
		return parameters
	
	@abstractmethod
	def generateHeader(self):pass
	
	@abstractmethod
	def generateFooter(self):pass
	
	def generateBody(self):
		strResult = ""
		
		fo = open(self.inputFile, "rb");
		for line in fo:
			if line.startswith("BR2_BUILDCONFIG"):
				value=line[-2:-1]
				if (value.isdigit()):
				  finalLine = self.trimFunctionNumber(line);
				elif (value.endswith("\"")):
				  finalLine = self.trimFunctionString(line);
				elif (value.endswith("y")):
				  finalLine = self.trimFunctionEnable(line);
				else:
				  finalLine = ""
				strResult += finalLine
				
			elif line.startswith("# BR2_BUILDCONFIG"):
				finalLine = self.trimFunctionDisable(line);
				strResult += finalLine
				
		fo.close()
		
		return strResult;
	
	def generateWholeContent(self):
		self.strContent = ""
		self.strContent = self.generateComment();
		self.strContent += self.generateHeader();
		self.strContent += self.generateBody();
		self.strContent += self.generateFooter();
		return self.strContent
	
	@abstractmethod
	def trimFunctionEnable(self, line):pass
	
	@abstractmethod
	def trimFunctionDisable(self, line):pass
	
	def serialized(self):
		fo = open(self.outputFile, "w")
		fo.writelines(self.strContent)
		fo.close()
	
	
class JavaConfigFile(BaseConfigFile):

	def generateHeader(self):
		parameters = "package com.pos.basic.build;"
		parameters += "\n\n"
		parameters += "public class BuildConfig {"
		parameters += "\n"
		return parameters
	
	def generateFooter(self):
		parameters = "}"
		return parameters
	
	def trimFunctionEnable(self, line):
		finalparameters = line.replace("BR2_BUILDCONFIG_", "");
		finalparameters = "    public static final boolean " + finalparameters
		finalparameters = finalparameters.replace("=y", " = true;")
		return finalparameters
	
	def trimFunctionDisable(self, line):
		finalparameters = line.replace("BR2_BUILDCONFIG_", "");
		finalparameters = finalparameters.replace("# ", "    public static final boolean ")
		finalparameters = finalparameters.replace("is not set", "= false;")
		return finalparameters

	def trimFunctionNumber(self, line):
		finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = "    public static final int " + finalparameters
                finalparameters = finalparameters.replace("=", " = ")
		finalparameters = finalparameters[:-1] + ";" + finalparameters[-1:]
		return finalparameters

	def trimFunctionString(self, line):
                finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = "    public static final String " + finalparameters
                finalparameters = finalparameters.replace("=", " =")
		finalparameters = finalparameters[:-1] + ";" + finalparameters[-1:]
		return finalparameters
		
class HeaderConfigFile(BaseConfigFile):
	def generateHeader(self):
		parameters = "#ifndef _BUILD_CONFIG_H_\n"
		parameters += "#define _BUILD_CONFIG_H_\n"
		parameters += "\n"
		return parameters
	
	def generateFooter(self):
		parameters = "\n"
		parameters += "#endif"
		return parameters
	
	def trimFunctionEnable(self, line):
		finalparameters = line.replace("BR2_BUILDCONFIG_", "");
		finalparameters = "#define " + finalparameters
		finalparameters = finalparameters.replace("=y", " 1")
		return finalparameters
	
	def trimFunctionDisable(self, line):
		return ""	# do noting is not config

	def trimFunctionNumber(self, line):
                finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = "#define " + finalparameters
                finalparameters = finalparameters.replace("=", " ")
		return finalparameters

	def trimFunctionString(self, line):
                finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = "#define " + finalparameters
                finalparameters = finalparameters.replace("=", " ")
		return finalparameters

class MakefileConfigFile(BaseConfigFile):
	def generateComment(self):
		parameters = "#\n"
		parameters += "# This file was auto generated by buildconfig.py\n"
		parameters += "# Don't modify!\n"
		parameters += "# Generated time: " + time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
		parameters += "\n#\n\n"
		return parameters
	
	def generateHeader(self):
		return ""	# do noting is not config
	
	def generateFooter(self):
		return ""	# do noting is not config
	
	def trimFunctionEnable(self, line):
		finalparameters = line.replace("BR2_BUILDCONFIG_", "").replace("=y", "").strip();
		finalparameters = finalparameters + " := true\n" 
		return finalparameters
	
	def trimFunctionDisable(self, line):
		return ""       # do noting is not config
		#finalparameters = line.replace("# BR2_BUILDCONFIG_", "").replace(" is not set", "").strip();
		#finalparameters = finalparameters + " := false\n"
		#return finalparameters

	def trimFunctionNumber(self, line):
                finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = finalparameters.replace("=", " := ");
		return finalparameters

	def trimFunctionString(self, line):
                finalparameters = line.replace("BR2_BUILDCONFIG_", "");
                finalparameters = finalparameters.replace("=", " := ").replace("\"", "");
		return finalparameters

class ConfigFileFactory:
	
	def createConfigFile(self, filetype, inputFile, outputFile):
		if(0 == cmp(filetype, CONST_HEAD_CONFIG_FILE)):
			return HeaderConfigFile(inputFile, outputFile);
		elif(0 == cmp(filetype, CONST_JAVA_CONFIG_FILE)):
			return JavaConfigFile(inputFile, outputFile);
		elif(0 == cmp(filetype, CONST_MAKEFILE_CONFIG_FILE)):
			return MakefileConfigFile(inputFile, outputFile);
		else:
			return JavaConfigFile(inputFile, outputFile);
		
def main(argv):	
	if len(argv) != 3:
		print "argv count error"
		sys.exit(1)
	
	filetype = argv[0]
	#print filetype
	inputFile = argv[1]
	#print inputFile
	outputFile = argv[2]
	#print outputFile
	configFileFactory = ConfigFileFactory();
	baseConfigFile = configFileFactory.createConfigFile(filetype, inputFile, outputFile);
	str = baseConfigFile.generateWholeContent();
	print str
	baseConfigFile.serialized();
	print "\nConfigFile generate done!\n"
	
if __name__ == '__main__':
	main(sys.argv[1:])
			
